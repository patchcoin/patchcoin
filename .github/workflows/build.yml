name: Continuous Integration

on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - 'contrib/**'
      - '**/*.md'

jobs:
  infrastructure-init:
    runs-on: ubuntu-24.04
    if: github.event_name != 'pull_request'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: .tf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      - name: Terraform init
        working-directory: .tf
        run: |
          TF_WORKSPACE=main terraform init -input=false
          terraform workspace select -or-create ${{ github.run_id }}

      - name: Terraform apply single server
        working-directory: .tf
        env:
          TF_VAR_runner_count: "1"
          TF_VAR_hcloud_token: "${{ secrets.HCLOUD_TOKEN }}"
          TF_VAR_github_pat: "${{ secrets.GH_PAT }}"
          TF_VAR_github_owner: "${{ github.repository_owner }}"
          TF_VAR_github_repo: "${{ github.event.repository.name }}"
          TF_VAR_run_id: "${{ github.run_id }}"
        run: terraform apply -auto-approve

  guix-base:
    runs-on:
      - self-hosted
      - hetzner
      - runid-${{ github.run_id }}
    needs: infrastructure-init
    if: github.event_name != 'pull_request'
    outputs:
      tag-hash: ${{ steps.detect.outputs.tag-hash }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            depends
            contrib/guix

      - run: echo tag-hash="$(echo "${{ hashFiles('contrib/guix/manifest.scm', 'contrib/guix/patches/**') }}" | cut -c 1-8)" >> $GITHUB_OUTPUT
        id: detect

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --allow-insecure-entitlement=security.insecure

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Build and Push guix-base Docker Image
        uses: docker/build-push-action@v6
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
        with:
          context: .
          file: contrib/guix/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/ci-tools/guix-base:${{ steps.detect.outputs.tag-hash }}
          target: guix-base
          allow: security.insecure
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}/ci-tools/guix-base:${{ steps.detect.outputs.tag-hash }}
            type=registry,ref=ghcr.io/patchcoin/patchcoin/ci-tools/guix-base:${{ steps.detect.outputs.tag-hash }}
          cache-to: type=inline

  infrastructure-next:
    runs-on: ubuntu-24.04
    needs: guix-base
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: .tf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      - name: Terraform init
        working-directory: .tf
        run: |
          TF_WORKSPACE=main terraform init -input=false
          terraform workspace select -or-create ${{ github.run_id }}

      - name: Terraform remove single server
        working-directory: .tf
        env:
          TF_VAR_runner_count: "0"
          TF_VAR_hcloud_token: "${{ secrets.HCLOUD_TOKEN }}"
          TF_VAR_github_pat: "${{ secrets.GH_PAT }}"
          TF_VAR_github_owner: "${{ github.repository_owner }}"
          TF_VAR_github_repo: "${{ github.event.repository.name }}"
          TF_VAR_run_id: "${{ github.run_id }}"
        run: |
          terraform destroy -auto-approve -input=false

      - name: Terraform apply 7 servers
        working-directory: .tf
        env:
          TF_VAR_runner_count: "7"
          TF_VAR_hcloud_token: "${{ secrets.HCLOUD_TOKEN }}"
          TF_VAR_github_pat: "${{ secrets.GH_PAT }}"
          TF_VAR_github_owner: "${{ github.repository_owner }}"
          TF_VAR_github_repo: "${{ github.event.repository.name }}"
          TF_VAR_run_id: "${{ github.run_id }}"
        run: |
          terraform apply -auto-approve -input=false

  guix-host:
    runs-on:
      - self-hosted
      - hetzner
      - runid-${{ github.run_id }}
    needs: [guix-base, infrastructure-next]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        host:
          - x86_64-linux-gnu
          - arm-linux-gnueabihf
          - aarch64-linux-gnu
          - riscv64-linux-gnu
          - x86_64-w64-mingw32
          - x86_64-apple-darwin
          - arm64-apple-darwin
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            depends
            contrib/guix

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --allow-insecure-entitlement=security.insecure

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Build and Push guix-host Docker image
        uses: docker/build-push-action@v6
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
        with:
          context: .
          file: contrib/guix/Dockerfile
          push: true
          allow: security.insecure
          tags: |
            ghcr.io/${{ github.repository }}/ci-tools/guix-host:${{ needs.guix-base.outputs.tag-hash }}-${{ matrix.host }}
          target: guix-host
          build-args: |
            HOST=${{ matrix.host }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}/ci-tools/guix-host:${{ needs.guix-base.outputs.tag-hash }}-${{ matrix.host }}
            type=registry,ref=ghcr.io/${{ github.repository }}/ci-tools/guix-base:${{ needs.guix-base.outputs.tag-hash }}
            type=registry,ref=ghcr.io/patchcoin/patchcoin/ci-tools/guix-host:${{ needs.guix-base.outputs.tag-hash }}-${{ matrix.host }}
            type=registry,ref=ghcr.io/patchcoin/patchcoin/ci-tools/guix-base:${{ needs.guix-base.outputs.tag-hash }}
          cache-to: type=inline

  binary:
    runs-on:
      - self-hosted
      - hetzner
      - runid-${{ github.run_id }}
    needs: [guix-base, guix-host, infrastructure-next]
    if: ${{ !cancelled() }}
    strategy:
      matrix:
        host:
          - x86_64-linux-gnu
          - arm-linux-gnueabihf
          - aarch64-linux-gnu
          - riscv64-linux-gnu
          - x86_64-w64-mingw32
          - x86_64-apple-darwin
          - arm64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - run: echo tag-hash="$(echo "${{ hashFiles('contrib/guix/manifest.scm', 'contrib/guix/patches/**') }}" | cut -c 1-8)" >> $GITHUB_OUTPUT
        id: detect

      - run: |
          echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
          echo TARGET=ghcr.io/${{ github.repository }}/ci-tools/guix-host:${{ steps.detect.outputs.tag-hash }}-${{ matrix.host }} >> $GITHUB_ENV
          echo TARGET_CACHE=ghcr.io/${{ github.repository }}/ci-tools/guix-host-depends-cache:${{ steps.detect.outputs.tag-hash }}-${{ matrix.host }} >> $GITHUB_ENV

      - name: Build ${{ matrix.host }} Binaries
        shell: bash
        id: build
        run: |
          set -euo pipefail
          cleanup() {
            docker stop build-${{ matrix.host }} || true
          }
          trap cleanup EXIT

          docker run --pull=always --rm -d --privileged --name=build-${{ matrix.host }} \
            -v "${PWD}":/patchcoin_aux \
            -v ~/.base_cache:/base_cache_aux \
            ${{ env.TARGET_CACHE }} \
          && echo cache-image-used=true >> $GITHUB_OUTPUT \
          || docker run --pull=always --rm -d --privileged --name=build-${{ matrix.host }} \
            -v "${PWD}":/patchcoin_aux \
            -v ~/.base_cache:/base_cache_aux \
            ${{ env.TARGET }}

          docker exec -i build-${{ matrix.host }} bash -c "
            source /root/.guix-profile/etc/profile
            git config --global --add safe.directory /patchcoin_aux/.git
            git clone /patchcoin_aux /patchcoin
            cd /patchcoin
            git checkout --progress --force ${{ github.sha }}
            env
            env BASE_CACHE=/base_cache SOURCES_PATH=/sources SDK_PATH=/SDKs ./contrib/guix/guix-build
            rm -rf /base_cache_aux/* || true
            mv /base_cache/* /base_cache_aux/ || true
            source \"/patchcoin/contrib/guix/libexec/prelude.bash\"
            mv \${OUTDIR_BASE:-\${VERSION_BASE}/output}/${{ matrix.host }}/* /patchcoin_aux/ || true
          "
          docker stop build-${{ matrix.host }}

      - run: cp -r ~/.base_cache base_cache

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --allow-insecure-entitlement=security.insecure

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and Push guix-host-depends-cache Docker image
        uses: docker/build-push-action@v6
        if: github.event_name != 'pull_request'
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
        with:
          context: .
          file: contrib/guix/Dockerfile
          push: true
          allow: security.insecure
          tags: ${{ env.TARGET_CACHE }}
          target: guix-host-depends-cache
          build-args: |
            HOST=${{ matrix.host }}
          cache-from: ${{ steps.build.outputs.cache-image-used == 'true' && env.TARGET_CACHE || env.TARGET }}
          cache-to: type=inline

      - name: Get short SHA
        id: slug
        run: echo "sha8=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: patchcoin-${{ steps.slug.outputs.sha8 }}-${{ matrix.host }}
          path: |
            *.tar.gz
            *.zip
            *.exe
            *.dmg
            !*-debug*
            !*-unsigned.tar.gz
          retention-days: 5
          if-no-files-found: error

  docker:
    runs-on:
      - self-hosted
      - hetzner
      - runid-${{ github.run_id }}
    needs: binary
    steps:
      - uses: actions/checkout@v4
        with:
          repository: patchcoin/packaging
          ssh-key: ${{ secrets.SSH_CHECKOUT_KEY }}

      - uses: actions/download-artifact@v4
        with:
          pattern: patchcoin-*linux*
          path: docker

      - name: Place artifacts
        working-directory: docker
        run: |
          mkdir -p linux/amd64 linux/arm/v7 linux/arm64
          mv patchcoin-*-x86_64-linux-gnu/patchcoin-*-x86_64-linux-gnu.tar.gz linux/amd64/
          mv patchcoin-*-arm-linux-gnueabihf/patchcoin-*-arm-linux-gnueabihf.tar.gz linux/arm/v7/
          mv patchcoin-*-aarch64-linux-gnu/patchcoin-*-aarch64-linux-gnu.tar.gz linux/arm64/

      - uses: docker/setup-qemu-action@v3
        with:
          platforms: arm,arm64

      - uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Detect env
        id: detect
        shell: bash
        run: |
          PUSH=false
          TAG_NAME=blank
          if [[ $GITHUB_REF == refs/heads/develop ]]; then
            PUSH=true
            TAG_NAME=develop
          fi
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            PUSH=true
            TAG_NAME=latest
          fi
          if [[ $GITHUB_REF == refs/heads/release-* ]]; then
            PUSH=true
            TAG_NAME=${GITHUB_REF/refs/heads/}
          fi
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            PUSH=true
            TAG_NAME=${GITHUB_REF/refs/tags/}
            TAG_NAME=${TAG_NAME/ptc\./}
            TAG_NAME=${TAG_NAME/ptc/}
            TAG_NAME=${TAG_NAME/v/}
          fi
          echo "push=${PUSH}" >> $GITHUB_OUTPUT
          echo "tag-name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: steps.detect.outputs.push == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: steps.detect.outputs.push == 'true'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
        with:
          context: docker
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ steps.detect.outputs.push == 'true' }}
          tags: |
            patchcoin/patchcoind:${{ steps.detect.outputs.tag-name }}
            ghcr.io/${{ github.repository }}/patchcoind:${{ steps.detect.outputs.tag-name }}

  release:
    runs-on:
      - self-hosted
      - hetzner
      - runid-${{ github.run_id }}
    needs: binary
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release-')
    steps:
      - name: Detect env
        id: detect
        shell: bash
        run: |
          TAG_NAME=noop
          RELEASE_TITLE=noop
          if [[ $GITHUB_REF == refs/heads/main || $GITHUB_REF == refs/heads/develop || $GITHUB_REF == refs/heads/release-* ]]; then
            TAG_NAME=latest
            RELEASE_TITLE="Development Build: ${GITHUB_REF/refs\/heads\//}"
          fi
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG_NAME=${GITHUB_REF/refs\/tags\//}
            TAG_NAME_NO_DOT=${TAG_NAME/ptc\./}
            RELEASE_TITLE="Release ${TAG_NAME_NO_DOT/ptc/}"
          fi
          if [[ -z "${{ secrets.GPG_PRIVATE_KEY }}" ]]; then
            TAG_NAME=noop
            RELEASE_TITLE=noop
          fi
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release-title=${RELEASE_TITLE}" >> $GITHUB_OUTPUT
          echo "sha8=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set up environment
        if: steps.detect.outputs.tag-name != 'noop'
        run: sudo apt-get update && sudo apt-get install -y mktorrent gpg bash

      - uses: actions/checkout@v4
        if: steps.detect.outputs.tag-name != 'noop'

      - uses: actions/download-artifact@v4
        if: steps.detect.outputs.tag-name != 'noop'
        with:
          pattern: patchcoin-*

      - name: Import GPG key
        if: steps.detect.outputs.tag-name != 'noop'
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: GPG user IDs
        if: steps.detect.outputs.tag-name != 'noop'
        run: |
          echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
          echo "name:        ${{ steps.import_gpg.outputs.name }}"
          echo "email:       ${{ steps.import_gpg.outputs.email }}"
          gpg --keyserver hkp://keyserver.ubuntu.com --send-key ${{ steps.import_gpg.outputs.keyid }}

      - name: Create torrent
        if: steps.detect.outputs.tag-name != 'noop'
        run: |
          rm -rf ${{ steps.detect.outputs.tag-name }}/*
          mkdir -p ${{ steps.detect.outputs.tag-name }}
          mv patchcoin-*-**/patchcoin-*.tar.gz \
            patchcoin-*-**/patchcoin-*.zip \
            patchcoin-*-**/patchcoin-*.exe \
            patchcoin-*-**/patchcoin-*.dmg \
          ${{ steps.detect.outputs.tag-name }}/
          cd ${{ steps.detect.outputs.tag-name }}
          sha256sum * > SHA256SUMS
          gpg --digest-algo sha256 --clearsign SHA256SUMS
          rm SHA256SUMS
          cd -
          mktorrent -w ${{ github.server_url }}/${{ github.repository }}/releases/download \
            -o ${{ steps.detect.outputs.tag-name }}/patchcoin-${{ steps.detect.outputs.tag-name }}.torrent \
            -a udp://tracker.opentrackr.org:1337/announce \
            -a udp://tracker.openbittorrent.com:6969/announce \
            -a udp://exodus.desync.com:6969/announce \
          ${{ steps.detect.outputs.tag-name }}

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.2.1
        with:
          gh-cli-version: 2.67.0

      - name: Check latest
        id: detect-publish-latest
        if: steps.detect.outputs.tag-name != 'noop' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release-'))
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PUBLISH=noop
          git fetch origin +refs/tags/latest:refs/tags/latest
          if ! git merge-base --is-ancestor refs/tags/latest HEAD; then
            PUBLISH=op
            if gh release list --repo ${{ github.repository }} | grep "latest"; then
              gh release delete latest --cleanup-tag --yes --repo ${{ github.repository }}
            fi
          fi
          echo "publish=$PUBLISH" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        if: steps.detect.outputs.tag-name != 'noop' && startsWith(github.ref, 'refs/tags/v')
        run: |
          git fetch --depth=1 origin +${{ github.ref }}:${{ github.ref }}
          git tag -l --format='%(contents)' ${GITHUB_REF/refs\/tags\//} > ${{ github.workspace }}-CHANGELOG.txt

      - uses: softprops/action-gh-release@v2
        if: steps.detect.outputs.tag-name != 'noop' && steps.detect-publish-latest.outputs.publish == 'op' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release-'))
        with:
          tag_name: ${{ steps.detect.outputs.tag-name }}
          token: ${{ github.token }}
          prerelease: true
          name: "${{ steps.detect.outputs.release-title }}"
          files: ${{ steps.detect.outputs.tag-name }}/*

      - uses: softprops/action-gh-release@v2
        if: steps.detect.outputs.tag-name != 'noop' && startsWith(github.ref, 'refs/tags/v')
        with:
          tag_name: ${{ steps.detect.outputs.tag-name }}
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          token: ${{ github.token }}
          prerelease: true
          name: "${{ steps.detect.outputs.release-title }}"
          files: ${{ steps.detect.outputs.tag-name }}/*

  infrastructure-cleanup:
    runs-on: ubuntu-24.04
    needs: [ infrastructure-next, guix-base, guix-host, binary, docker, release ]
    if: always()
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: .tf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      - name: Terraform init
        working-directory: .tf
        run: |
          TF_WORKSPACE=main terraform init -input=false
          terraform workspace select -or-create ${{ github.run_id }}

      - name: Terraform final destroy
        working-directory: .tf
        env:
          TF_VAR_runner_count: "0"
          TF_VAR_hcloud_token: "${{ secrets.HCLOUD_TOKEN }}"
          TF_VAR_github_pat: "${{ secrets.GH_PAT }}"
          TF_VAR_github_owner: "${{ github.repository_owner }}"
          TF_VAR_github_repo: "${{ github.event.repository.name }}"
          TF_VAR_run_id: "${{ github.run_id }}"
        run: |
          terraform destroy -auto-approve
          terraform workspace select main
          terraform workspace delete ${{ github.run_id }}
